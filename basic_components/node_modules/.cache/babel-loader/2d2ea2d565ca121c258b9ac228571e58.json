{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\sova_intern\\\\rec_task\\\\basic_components\\\\src\\\\components\\\\forms\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useEffect } from 'react';\nimport Button from '../button/Button';\nimport Dropdown from '../dropdown/Dropdown';\nimport TextInput from '../textInput/TextInput';\nimport './Form.css';\n\nfunction Form({\n  name\n}) {\n  _s();\n\n  let select1 = {\n    name: 'Tested Biomarker',\n    values: [\"ECG\", \"Glucose\", \"CBC\"],\n    width: '12rem'\n  };\n  let select2 = {\n    name: 'unit',\n    values: ['mgdl', 'mg', 'cm'],\n    width: '4rem'\n  };\n  const [tests, setTests] = useState([select1, select2]); ///use state not working\n\n  const countRows = useRef(0);\n  const formRef = useRef(null);\n  const refRow = useRef(null);\n  const [labResults, setLabResults] = useRef(new Map());\n  const keys = useRef(new Set(['ECG', 'Glucose', 'CBC']));\n  const deletedKeys = useRef([]); ///one time initialisation when component is mounted\n\n  useEffect(() => {\n    console.log(countRows.current);\n    let backButton = formRef.current.children[2].children[0];\n    backButton.disabled = true;\n    backButton.style.opacity = 0.5;\n    let submitButton = formRef.current.children[2].children[1];\n    console.log(submitButton);\n    submitButton.disabled = true;\n    submitButton.style.opacity = 0.5;\n  }, []); //////////////////////////\n\n  const submitHandler = e => {\n    console.log(e.target);\n  }; /////////////////////////////////\n\n\n  const saveHandler = e => {\n    console.log(e.target);\n  }; ///////////////////////////////\n\n\n  const eventBubbling = e => {\n    if (e.target.type == 'submit') {\n      console.log(e.currentTarget.children); //initially when there were multiple rows ref was changed based on target\n      // refRow.current = e.currentTarget;\n\n      let rowElements = refRow.current.children;\n      var l = rowElements.length;\n      let selectedTest = rowElements[2].value;\n      let selectedUnit = rowElements[5].value;\n      let defaultValue = 'Select';\n      let selectedValue = rowElements[l - 2].value;\n\n      if (selectedTest != defaultValue && selectedUnit != defaultValue && selectedValue.trim() != '') {\n        deletedKeys.current.push(selectedTest);\n        keys.current.delete(selectedTest);\n        console.log(keys.current);\n        setTests(([select1, select2]) => [select1 = {\n          name: 'Tested Biomarker',\n          values: Array.from(keys.current),\n          width: '12rem'\n        }, { ...select2\n        }]);\n        console.log(tests);\n        setLabResults(prevLabResults => prevLabResults.set(selectedTest, {\n          'unit': selectedUnit,\n          'value': selectedValue\n        })); //  labResults.current.set(selectedTest, { 'unit': selectedUnit, 'value': selectedValue });\n\n        console.log(labResults); //   setCountRows((prevCount) => (prevCount + 1));\n        // countRows.current+=1;\n\n        console.log(countRows.current);\n        countRows.current = rowElements[2].children.length - 1;\n        console.log(e.target);\n\n        if (countRows.current == 0) {\n          e.target.disabled = true;\n          e.target.style.opacity = '0.5';\n          let submitButton = formRef.current.children[2].children[1];\n          submitButton.disabled = false;\n          submitButton.style.opacity = 1;\n        }\n\n        if (countRows.current >= 1) {\n          let backButton = formRef.current.children[2].children[0];\n          backButton.disabled = false;\n          backButton.style.opacity = 1;\n        }\n      } else {\n        alert('invalid entry');\n      }\n\n      rowElements[l - 2].value = '';\n    }\n  }; ///////////////\n\n\n  const backHandler = e => {\n    console.log(e.target); // setCountRows((prevCount)=>(prevCount-1));\n\n    countRows.current += 1;\n    console.log(countRows.current);\n    keys.current.add(deletedKeys.current.pop());\n    console.log(keys.current);\n    console.log(deletedKeys.current);\n    setTests(([select1, select2]) => [select1 = {\n      name: 'Tested Biomarker',\n      values: Array.from(keys.current),\n      width: '12rem'\n    }, { ...select2\n    }]);\n    console.log(tests);\n    let lastRowElements = formRef.current.children[2].children;\n    let refRowElements = refRow.current.children;\n    let submitButton = lastRowElements[1];\n    var l = refRowElements.length;\n\n    if (countRows.current == 3) {\n      let backButton = lastRowElements[0];\n      backButton.disabled = true;\n      backButton.style.opacity = 0.5;\n    } else if (countRows.current > 0) {\n      refRowElements[l - 1].disabled = false; //save button\n\n      refRowElements[l - 1].style.opacity = 1;\n      submitButton.disabled = true;\n      submitButton.style.opacity = 0.5;\n    } else if (countRows == 0) {\n      submitButton.disabled = false;\n      submitButton.style.opacity = 1;\n    }\n\n    refRowElements[l - 2].value = '';\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `container-fluid `,\n      id: \"lab-report\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `grid form`,\n        ref: formRef,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          onClick: e => eventBubbling(e),\n          ref: refRow,\n          children: [tests.map(test => /*#__PURE__*/_jsxDEV(Dropdown, {\n            name: test.name,\n            values: test.values,\n            changeHandler: e => null,\n            className: \"col\",\n            style: {\n              width: `${test.width}`\n            }\n          }, tests.indexOf(test), false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 43\n          }, this)), /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"result\",\n            changeHandler: e => null,\n            style: {\n              backgroundColor: 'aliceBlue'\n            },\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            name: \"Save\",\n            clickHandler: saveHandler,\n            variant: \"primary\",\n            color: \"white\",\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row flex-end\",\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            name: \"Back\",\n            clickHandler: backHandler,\n            variant: \"secondary\",\n            color: \"white\",\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            name: \"Submit\",\n            clickHandler: submitHandler,\n            variant: \"secondary\",\n            color: \"white\",\n            className: \"col\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `container-fluid `,\n      id: \"logged-values\",\n      style: {\n        justifyContent: 'flex-start'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"b\", {\n          children: \"Logged values:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Form, \"Ls3mtwYKffgIRLGwKIvZ0IQqXcg=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/sova_intern/rec_task/basic_components/src/components/forms/Form.js"],"names":["React","useState","useRef","useEffect","Button","Dropdown","TextInput","Form","name","select1","values","width","select2","tests","setTests","countRows","formRef","refRow","labResults","setLabResults","Map","keys","Set","deletedKeys","console","log","current","backButton","children","disabled","style","opacity","submitButton","submitHandler","e","target","saveHandler","eventBubbling","type","currentTarget","rowElements","l","length","selectedTest","value","selectedUnit","defaultValue","selectedValue","trim","push","delete","Array","from","prevLabResults","set","alert","backHandler","add","pop","lastRowElements","refRowElements","map","test","indexOf","backgroundColor","justifyContent"],"mappings":"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","sourcesContent":["import React,{useState,useRef,useEffect} from 'react'\r\nimport Button from '../button/Button'\r\nimport Dropdown from '../dropdown/Dropdown'\r\nimport TextInput from '../textInput/TextInput'\r\nimport './Form.css'\r\n\r\nfunction Form({name}) {\r\n    let select1 = {\r\n        name: 'Tested Biomarker',\r\n        values: [\"ECG\", \"Glucose\", \"CBC\"],\r\n        width:'12rem'\r\n    }\r\n    let select2={\r\n        name: 'unit',\r\n        values: ['mgdl', 'mg', 'cm'] ,\r\n        width: '4rem'\r\n    }\r\n    const [tests,setTests]=useState([select1,select2]);\r\n\r\n///use state not working\r\nconst countRows=useRef(0);\r\nconst formRef=useRef(null)\r\nconst refRow=useRef(null);\r\nconst [labResults,setLabResults]=useRef(new Map());\r\nconst keys=useRef(new Set(['ECG','Glucose','CBC']));\r\nconst deletedKeys=useRef([]);\r\n\r\n \r\n///one time initialisation when component is mounted\r\n useEffect(()=>{\r\n     \r\n     console.log(countRows.current);\r\n     let backButton = formRef.current.children[2].children[0];\r\n     backButton.disabled = true;\r\n     backButton.style.opacity = 0.5; \r\n     let submitButton = formRef.current.children[2].children[1];\r\n     console.log(submitButton);\r\n     submitButton.disabled = true;\r\n     submitButton.style.opacity = 0.5;\r\n },[])   \r\n\r\n\r\n//////////////////////////\r\nconst submitHandler=(e)=>{\r\n   console.log(e.target);  \r\n}\r\n/////////////////////////////////\r\nconst saveHandler=(e)=>{ \r\nconsole.log(e.target);\r\n\r\n\r\n}\r\n///////////////////////////////\r\nconst eventBubbling=(e)=>{\r\n   \r\n  if(e.target.type=='submit'){\r\n      console.log(e.currentTarget.children);\r\n      //initially when there were multiple rows ref was changed based on target\r\n     // refRow.current = e.currentTarget;\r\n      let rowElements = refRow.current.children;\r\n      var l = rowElements.length;\r\n      let selectedTest = rowElements[2].value;\r\n      let selectedUnit=rowElements[5].value;\r\n      let defaultValue='Select';\r\n      let selectedValue=rowElements[l-2].value;\r\n     \r\n      if (selectedTest != defaultValue && selectedUnit != defaultValue && selectedValue.trim() != '') {\r\n\r\n         deletedKeys.current.push(selectedTest);\r\n         keys.current.delete(selectedTest);\r\n         console.log(keys.current);\r\n      \r\n     setTests(([select1,select2])=>(\r\n         [select1={\r\n             name:'Tested Biomarker',\r\n             values: Array.from(keys.current),\r\n             width:'12rem'\r\n         },{...select2}]\r\n     )   \r\n     )\r\n     console.log(tests);\r\n          setLabResults((prevLabResults)=>(prevLabResults.set(selectedTest, { 'unit': selectedUnit, 'value': selectedValue })));\r\n        //  labResults.current.set(selectedTest, { 'unit': selectedUnit, 'value': selectedValue });\r\n          console.log(labResults);\r\n        //   setCountRows((prevCount) => (prevCount + 1));\r\n       // countRows.current+=1;\r\n          console.log(countRows.current )\r\n         countRows.current= rowElements[2].children.length-1;\r\n          console.log(e.target)\r\n          if(countRows.current==0){\r\n              e.target.disabled=true;\r\n              e.target.style.opacity='0.5';\r\n              let submitButton=formRef.current.children[2].children[1];\r\n              submitButton.disabled=false;\r\n              submitButton.style.opacity=1;\r\n          }\r\n          if(countRows.current>=1){\r\n              let backButton=formRef.current.children[2].children[0];\r\n              backButton.disabled=false;\r\n              backButton.style.opacity=1;\r\n          }\r\n      }\r\n      else{\r\n          alert('invalid entry');\r\n      }\r\n      rowElements[l - 2].value = '';\r\n     \r\n\r\n  }   \r\n}\r\n\r\n///////////////\r\nconst backHandler=(e)=>{\r\n    console.log(e.target);\r\n   // setCountRows((prevCount)=>(prevCount-1));\r\n   countRows.current+=1;\r\n    console.log(countRows.current);\r\n        keys.current.add(deletedKeys.current.pop());\r\n        console.log(keys.current);\r\n        console.log(deletedKeys.current);\r\n    setTests(([select1, select2]) => (\r\n        [select1 = {\r\n            name: 'Tested Biomarker',\r\n            values: Array.from(keys.current),\r\n            width:'12rem'\r\n        }, { ...select2 }]\r\n    )\r\n    )\r\n    console.log(tests);\r\n    let lastRowElements = formRef.current.children[2].children;\r\n    let refRowElements = refRow.current.children;\r\n    let submitButton = lastRowElements[1];\r\n    var l = refRowElements.length;\r\n    if (countRows.current == 3) {\r\n        let backButton = lastRowElements[0];\r\n        backButton.disabled = true;\r\n        backButton.style.opacity = 0.5; \r\n    }\r\n    \r\n    else if (countRows.current > 0) {\r\n        refRowElements[l-1].disabled = false; //save button\r\n        refRowElements[l-1].style.opacity = 1;\r\n        submitButton.disabled=true;\r\n        submitButton.style.opacity=0.5;\r\n    }\r\n    else if(countRows==0){\r\n        submitButton.disabled=false;\r\n        submitButton.style.opacity=1;\r\n    }\r\n   \r\n    refRowElements[l - 2].value = '';\r\n    \r\n}\r\n    return (\r\n        <>\r\n        <div className={`container-fluid `} id=\"lab-report\" >  \r\n           \r\n            <div className={`grid form`} ref={formRef}>\r\n            <div className='row'>\r\n                    <h3 >{name}</h3>\r\n            </div>\r\n       \r\n                <div className='row'  onClick={(e) => eventBubbling(e)} ref={refRow} >\r\n                    {tests.map((test) => (<Dropdown key={tests.indexOf(test)} name={test.name} values={test.values} changeHandler={(e) => null} className='col' style={{width:`${test.width}`}}/>))}\r\n                    <TextInput name=\"result\" changeHandler={(e) => null} style={{ backgroundColor: 'aliceBlue' }} className='col' />\r\n                    <Button name='Save' clickHandler={saveHandler}  variant='primary' color='white' className='col' ></Button>\r\n\r\n                    </div>\r\n               \r\n                <div className='row flex-end'>\r\n                    <Button name='Back' clickHandler={backHandler} variant='secondary' color='white'\r\n                        className='col'  ></Button>  \r\n                    <Button name='Submit' clickHandler={submitHandler} variant='secondary' color='white'\r\n                    className='col'  ></Button>   \r\n                                \r\n                </div>              \r\n\r\n            </div>\r\n            \r\n        </div>\r\n        <div className={`container-fluid `} id='logged-values' style={{justifyContent:'flex-start'}}>\r\n             <p >\r\n                    <b>Logged values:</b>\r\n\r\n             </p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form\r\n"]},"metadata":{},"sourceType":"module"}