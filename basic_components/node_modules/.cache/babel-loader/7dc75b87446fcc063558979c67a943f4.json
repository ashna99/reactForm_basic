{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\sova_intern\\\\rec_task\\\\basic_components\\\\src\\\\components\\\\forms\\\\Form.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from 'react';\nimport Button from '../button/Button';\nimport Dropdown from '../dropdown/Dropdown';\nimport TextInput from '../textInput/TextInput';\nimport './Form.css';\n\nfunction Form({\n  name\n}) {\n  _s();\n\n  const tests = [{\n    name: 'Tested Biomarker',\n    values: ['ECG', 'Glucose', 'CBC']\n  }, {\n    name: 'unit',\n    values: ['mgdl', 'mg', 'cm']\n  }];\n  const formRef = useRef();\n  const [lastRow, setLastRow] = useState(1);\n  const [resVal, setResVal] = useState('');\n  const [labResults, setLabResults] = useState([]);\n\n  const selectHandler = e => {\n    console.log(e.target.getAttribut('key'));\n  };\n\n  const addRowHandler = e => {\n    // const addRow = (r) => {\n    //     const newRow = React.createElement(r);\n    //     r.nextElement(newRow)\n    // }\n    console.log(e.target); // console.log(rowRef.current);\n\n    const currRow = formRef.current.children[lastRow]; // addRow(currRow);\n\n    setLastRow(prevLastRow => prevLastRow + 1);\n    const lengthOfRows = formRef.current.children.length;\n  };\n\n  const saveHandler = e => {\n    const lengthOfRows = formRef.current.children.length;\n    console.log(lengthOfRows);\n    const tempArr = [];\n    console.log(tempArr); // for(let i=1;i<lengthOfRows;i++){\n    //     let currRow = formRef.current.children[i];\n    //     tempArr.push({\n    //         'Tested Biomarker':currRow.children[0].children[1],\n    //         'result':currRow.children[1],\n    //         'value':currRow.children[2]\n    //     })\n    // }\n\n    tempArr.push('a');\n    console.log(tempArr); //setLabResults(tempArr);\n    //console.log(labResults);\n\n    console.log(e.target);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `container-fluid`,\n    id: \"lab-report\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `grid form`,\n      ref: formRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: [tests.map(test => /*#__PURE__*/_jsxDEV(Dropdown, {\n          name: test.name,\n          values: test.values,\n          changeHandler: selectHandler,\n          className: \"col\"\n        }, tests.indexOf(test), false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 44\n        }, this)), /*#__PURE__*/_jsxDEV(TextInput, {\n          name: \"result\",\n          changeHandler: e => setResVal(e.target.value),\n          style: {\n            backgroundColor: 'aliceBlue'\n          },\n          value: resVal,\n          className: \"col\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row flex-end\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          name: \"Add Row\",\n          clickHandler: addRowHandler,\n          variant: \"secondary\",\n          color: \"white\",\n          className: \"col\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          name: \"Save\",\n          clickHandler: saveHandler,\n          variant: \"primary\",\n          color: \"white\",\n          className: \"col\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Form, \"Y/1gB0msyaOWdPHIjh5ZoY9rwqg=\");\n\n_c = Form;\nexport default Form;\n\nvar _c;\n\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"sources":["D:/sova_intern/rec_task/basic_components/src/components/forms/Form.js"],"names":["React","useState","useRef","Button","Dropdown","TextInput","Form","name","tests","values","formRef","lastRow","setLastRow","resVal","setResVal","labResults","setLabResults","selectHandler","e","console","log","target","getAttribut","addRowHandler","currRow","current","children","prevLastRow","lengthOfRows","length","saveHandler","tempArr","push","map","test","indexOf","value","backgroundColor"],"mappings":"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","sourcesContent":["import React,{useState,useRef} from 'react'\r\nimport Button from '../button/Button'\r\nimport Dropdown from '../dropdown/Dropdown'\r\nimport TextInput from '../textInput/TextInput'\r\nimport './Form.css'\r\n\r\nfunction Form({name}) {\r\n   \r\n    const tests=[{\r\n        name:'Tested Biomarker',\r\n        values: ['ECG', 'Glucose', 'CBC']\r\n    },{\r\n        name:'unit',\r\n        values:['mgdl','mg','cm']\r\n    }\r\n\r\n]\r\nconst formRef=useRef();\r\nconst [lastRow,setLastRow]=useState(1)\r\n\r\nconst [resVal,setResVal]=useState('')\r\nconst[labResults,setLabResults]=useState([]);\r\n\r\n\r\nconst selectHandler=(e)=>{\r\n   console.log(e.target.getAttribut('key'));\r\n}\r\nconst addRowHandler=(e)=>{\r\n    // const addRow = (r) => {\r\n    //     const newRow = React.createElement(r);\r\n    //     r.nextElement(newRow)\r\n    // }\r\n  console.log(e.target);\r\n // console.log(rowRef.current);\r\n    const currRow = formRef.current.children[lastRow];\r\n   // addRow(currRow);\r\n setLastRow(prevLastRow=>(prevLastRow+1));\r\n  const lengthOfRows=formRef.current.children.length;\r\n \r\n \r\n  \r\n}\r\nconst saveHandler=(e)=>{\r\n    const lengthOfRows = formRef.current.children.length; \r\n    console.log(lengthOfRows);\r\n    const tempArr=[];\r\n    console.log(tempArr);\r\n    // for(let i=1;i<lengthOfRows;i++){\r\n    //     let currRow = formRef.current.children[i];\r\n    //     tempArr.push({\r\n    //         'Tested Biomarker':currRow.children[0].children[1],\r\n    //         'result':currRow.children[1],\r\n    //         'value':currRow.children[2]\r\n    //     })\r\n    // }\r\n    tempArr.push('a');\r\n    console.log(tempArr);\r\n //setLabResults(tempArr);\r\n //console.log(labResults);\r\n  console.log(e.target);\r\n}\r\n\r\n    return (\r\n        <div className={`container-fluid`} id=\"lab-report\" >  \r\n           \r\n            <div className={`grid form`} ref={formRef}>\r\n            <div className='row'>\r\n                    <h3 >{name}</h3>\r\n            </div>\r\n                <div className='row' >\r\n                    {tests.map(( test) => (<Dropdown key={tests.indexOf(test)} name={test.name} values={test.values} changeHandler={selectHandler} className='col'/>))}\r\n                    <TextInput name=\"result\" changeHandler={(e)=>setResVal(e.target.value)} style={{backgroundColor:'aliceBlue'} }  value={resVal} className='col' />\r\n                </div>\r\n                <div className='row flex-end'>\r\n                    <Button name='Add Row' clickHandler={addRowHandler} variant='secondary' color='white'\r\n                    className='col'></Button>\r\n                    <Button name='Save' clickHandler={saveHandler} variant='primary' color='white'\r\n                    className='col'></Button>\r\n                </div>\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n"]},"metadata":{},"sourceType":"module"}