[{"D:\\sova_intern\\rec_task\\basic_components\\src\\index.js":"1","D:\\sova_intern\\rec_task\\basic_components\\src\\reportWebVitals.js":"2","D:\\sova_intern\\rec_task\\basic_components\\src\\App.js":"3","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\button\\Button.js":"4","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\dropdown\\Dropdown.js":"5","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\option\\Option.js":"6","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\forms\\Form.js":"7","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\textInput\\TextInput.js":"8","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\index.js":"9","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\reportWebVitals.js":"10","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\App.js":"11","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\button\\Button.js":"12","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\dropdown\\Dropdown.js":"13","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\forms\\Form.js":"14","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\textInput\\TextInput.js":"15","C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\option\\Option.js":"16"},{"size":500,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"18"},{"size":373,"mtime":1612457976440,"results":"20","hashOfConfig":"18"},{"size":438,"mtime":1612426101842,"results":"21","hashOfConfig":"18"},{"size":515,"mtime":1612446450282,"results":"22","hashOfConfig":"18"},{"size":144,"mtime":1612446458101,"results":"23","hashOfConfig":"18"},{"size":7008,"mtime":1612460207273,"results":"24","hashOfConfig":"18"},{"size":365,"mtime":1612342737488,"results":"25","hashOfConfig":"18"},{"size":517,"mtime":1612498223847,"results":"26","hashOfConfig":"27"},{"size":375,"mtime":1612498223847,"results":"28","hashOfConfig":"27"},{"size":190,"mtime":1612639800551,"results":"29","hashOfConfig":"27"},{"size":438,"mtime":1612498223847,"results":"30","hashOfConfig":"27"},{"size":515,"mtime":1612498223847,"results":"31","hashOfConfig":"27"},{"size":8204,"mtime":1612644245979,"results":"32","hashOfConfig":"27"},{"size":365,"mtime":1612498223847,"results":"33","hashOfConfig":"27"},{"size":144,"mtime":1612498223847,"results":"34","hashOfConfig":"27"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"gtyej2",{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"37"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"37"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"asvur8",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},"D:\\sova_intern\\rec_task\\basic_components\\src\\index.js",[],["72","73"],"D:\\sova_intern\\rec_task\\basic_components\\src\\reportWebVitals.js",[],"D:\\sova_intern\\rec_task\\basic_components\\src\\App.js",["74","75","76","77"],"\nimport './App.css';\nimport Button from './components/button/Button';\nimport Dropdown from './components/dropdown/Dropdown';\nimport Form from './components/forms/Form';\n\n\nfunction App() {\n  const helloHandler=(e)=>{\n     console.log(e.target);\n  }\n  const values=['val1','val2','val3']\n  return (\n    \n       <Form name='Lab Report'/>\n    \n    \n  );\n}\n\nexport default App;\n","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\button\\Button.js",[],"D:\\sova_intern\\rec_task\\basic_components\\src\\components\\dropdown\\Dropdown.js",[],"D:\\sova_intern\\rec_task\\basic_components\\src\\components\\option\\Option.js",[],["78","79"],"D:\\sova_intern\\rec_task\\basic_components\\src\\components\\forms\\Form.js",["80","81","82","83","84","85","86"],"import React,{useState,useRef,useEffect} from 'react'\r\nimport Button from '../button/Button'\r\nimport Dropdown from '../dropdown/Dropdown'\r\nimport TextInput from '../textInput/TextInput'\r\nimport './Form.css'\r\n\r\nfunction Form({name}) {\r\n    let select1 = {\r\n        name: 'Tested Biomarker',\r\n        values: [\"ECG\", \"Glucose\", \"CBC\"],\r\n        width:'12rem'\r\n    }\r\n    let select2={\r\n        name: 'unit',\r\n        values: ['mgdl', 'mg', 'cm'] ,\r\n        width: '4rem'\r\n    }\r\n    const [tests,setTests]=useState([select1,select2]);\r\n\r\n///use state not working\r\nconst countRows=useRef(0);\r\nconst formRef=useRef(null)\r\nconst refRow=useRef(null);\r\nconst [labResults,setLabResults]=useState(new Map());\r\nconst keys=useRef(new Set(['ECG','Glucose','CBC']));\r\nconst deletedKeys=useRef([]);\r\n\r\n \r\n///one time initialisation when component is mounted\r\n useEffect(()=>{\r\n     \r\n     console.log(countRows.current);\r\n     let backButton = formRef.current.children[2].children[0];\r\n     backButton.disabled = true;\r\n     backButton.style.opacity = 0.5; \r\n     let submitButton = formRef.current.children[2].children[1];\r\n     console.log(submitButton);\r\n     submitButton.disabled = true;\r\n     submitButton.style.opacity = 0.5;\r\n },[])   \r\n\r\n\r\n//////////////////////////\r\nconst submitHandler=(e)=>{\r\n   console.log(e.target);  \r\n}\r\n/////////////////////////////////\r\nconst saveHandler=(e)=>{ \r\nconsole.log(e.target);\r\n\r\n\r\n}\r\n///////////////////////////////\r\nconst eventBubbling=(e)=>{\r\n   \r\n  if(e.target.type=='submit'){\r\n      console.log(e.currentTarget.children);\r\n      //initially when there were multiple rows ref was changed based on target\r\n     // refRow.current = e.currentTarget;\r\n      let rowElements = refRow.current.children;\r\n      var l = rowElements.length;\r\n      let selectedTest = rowElements[2].value;\r\n      let selectedUnit=rowElements[5].value;\r\n      let defaultValue='Select';\r\n      let selectedValue=rowElements[l-2].value;\r\n     \r\n      if (selectedTest != defaultValue && selectedUnit != defaultValue && selectedValue.trim() != '') {\r\n\r\n         deletedKeys.current.push(selectedTest);\r\n         keys.current.delete(selectedTest);\r\n         console.log(keys.current);\r\n      \r\n     setTests(([select1,select2])=>(\r\n         [select1={\r\n             name:'Tested Biomarker',\r\n             values: Array.from(keys.current),\r\n             width:'12rem'\r\n         },{...select2}]\r\n     )   \r\n     )\r\n     console.log(tests);\r\n          setLabResults((prevLabResults)=>(prevLabResults.set(selectedTest, { 'unit': selectedUnit, 'value': selectedValue })));\r\n        //  labResults.current.set(selectedTest, { 'unit': selectedUnit, 'value': selectedValue });\r\n          console.log(labResults);\r\n        //   setCountRows((prevCount) => (prevCount + 1));\r\n       // countRows.current+=1;\r\n          console.log(countRows.current )\r\n         countRows.current= rowElements[2].children.length-1;\r\n          console.log(e.target)\r\n          if(countRows.current==0){\r\n              e.target.disabled=true;\r\n              e.target.style.opacity='0.5';\r\n              let submitButton=formRef.current.children[2].children[1];\r\n              submitButton.disabled=false;\r\n              submitButton.style.opacity=1;\r\n          }\r\n          if(countRows.current>=1){\r\n              let backButton=formRef.current.children[2].children[0];\r\n              backButton.disabled=false;\r\n              backButton.style.opacity=1;\r\n          }\r\n      }\r\n      else{\r\n          alert('invalid entry');\r\n      }\r\n      rowElements[l - 2].value = '';\r\n     \r\n\r\n  }   \r\n}\r\n\r\n///////////////\r\nconst backHandler=(e)=>{\r\n    console.log(e.target);\r\n   // setCountRows((prevCount)=>(prevCount-1));\r\n   countRows.current+=1;\r\n    console.log(countRows.current);\r\n    let deletedKey = deletedKeys.current.pop();\r\n        keys.current.add(deletedKey);\r\n        setLabResults((prevLabResults)=>(prevLabResults.delete(deletedKey)));\r\n        console.log(labResults.keys());\r\n        console.log(keys.current);\r\n        console.log(deletedKeys.current);\r\n    setTests(([select1, select2]) => (\r\n        [select1 = {\r\n            name: 'Tested Biomarker',\r\n            values: Array.from(keys.current),\r\n            width:'12rem'\r\n        }, { ...select2 }]\r\n    )\r\n    )\r\n    console.log(tests);\r\n    let lastRowElements = formRef.current.children[2].children;\r\n    let refRowElements = refRow.current.children;\r\n    let submitButton = lastRowElements[1];\r\n    var l = refRowElements.length;\r\n    if (countRows.current == 3) {\r\n        let backButton = lastRowElements[0];\r\n        backButton.disabled = true;\r\n        backButton.style.opacity = 0.5; \r\n    }\r\n    \r\n    else if (countRows.current > 0) {\r\n        refRowElements[l-1].disabled = false; //save button\r\n        refRowElements[l-1].style.opacity = 1;\r\n        submitButton.disabled=true;\r\n        submitButton.style.opacity=0.5;\r\n    }\r\n    else if(countRows==0){\r\n        submitButton.disabled=false;\r\n        submitButton.style.opacity=1;\r\n    }\r\n   \r\n    refRowElements[l - 2].value = '';\r\n    \r\n}\r\n    return (\r\n        <>\r\n        <div className={`container-fluid `} id=\"lab-report\" >  \r\n           \r\n            <div className={`grid form`} ref={formRef}>\r\n            <div className='row'>\r\n                    <h3 >{name}</h3>\r\n            </div>\r\n       \r\n                <div className='row'  onClick={(e) => eventBubbling(e)} ref={refRow} >\r\n                    {tests.map((test) => (<Dropdown key={tests.indexOf(test)} name={test.name} values={test.values} changeHandler={(e) => null} className='col' style={{width:`${test.width}`}}/>))}\r\n                    <TextInput name=\"result\" changeHandler={(e) => null} style={{ backgroundColor: 'aliceBlue' }} className='col' />\r\n                    <Button name='Save' clickHandler={saveHandler}  variant='primary' color='white' className='col' ></Button>\r\n\r\n                    </div>\r\n               \r\n                <div className='row flex-end'>\r\n                    <Button name='Back' clickHandler={backHandler} variant='secondary' color='white'\r\n                        className='col'  ></Button>  \r\n                    <Button name='Submit' clickHandler={submitHandler} variant='secondary' color='white'\r\n                    className='col'  ></Button>   \r\n                                \r\n                </div>              \r\n\r\n            </div>\r\n            \r\n        </div>\r\n        {/* <div  id='logged-values' >\r\n                <p className='container' >\r\n                    <b>{`Logged values:`}</b>\r\n                {\r\n                 (labResults.size!==0) ?  ( Array.from(labResults.keys()).map((key)=>(\r\n                        <>                      \r\n                        <p >{`${key}: value= ${labResults.get(key).value} ${labResults.get(key).unit}`}</p>\r\n                        \r\n                        </>\r\n                        ))\r\n                 ):(<></>)\r\n                }\r\n             </p>\r\n        </div> */}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","D:\\sova_intern\\rec_task\\basic_components\\src\\components\\textInput\\TextInput.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\index.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\reportWebVitals.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\App.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\button\\Button.js",[],["87","88"],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\dropdown\\Dropdown.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\forms\\Form.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\textInput\\TextInput.js",[],"C:\\Users\\acer\\Documents\\GitHub\\reactForm_basic\\basic_components\\src\\components\\option\\Option.js",[],{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"93","severity":1,"message":"97","line":4,"column":8,"nodeType":"95","messageId":"96","endLine":4,"endColumn":16},{"ruleId":"93","severity":1,"message":"98","line":9,"column":9,"nodeType":"95","messageId":"96","endLine":9,"endColumn":21},{"ruleId":"93","severity":1,"message":"99","line":12,"column":9,"nodeType":"95","messageId":"96","endLine":12,"endColumn":15},{"ruleId":"89","replacedBy":"100"},{"ruleId":"91","replacedBy":"101"},{"ruleId":"102","severity":1,"message":"103","line":56,"column":19,"nodeType":"104","messageId":"105","endLine":56,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":67,"column":24,"nodeType":"104","messageId":"105","endLine":67,"endColumn":26},{"ruleId":"102","severity":1,"message":"106","line":67,"column":56,"nodeType":"104","messageId":"105","endLine":67,"endColumn":58},{"ruleId":"102","severity":1,"message":"106","line":67,"column":96,"nodeType":"104","messageId":"105","endLine":67,"endColumn":98},{"ruleId":"102","severity":1,"message":"103","line":90,"column":31,"nodeType":"104","messageId":"105","endLine":90,"endColumn":33},{"ruleId":"102","severity":1,"message":"103","line":137,"column":27,"nodeType":"104","messageId":"105","endLine":137,"endColumn":29},{"ruleId":"102","severity":1,"message":"103","line":149,"column":22,"nodeType":"104","messageId":"105","endLine":149,"endColumn":24},{"ruleId":"89","replacedBy":"107"},{"ruleId":"91","replacedBy":"108"},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'Dropdown' is defined but never used.","'helloHandler' is assigned a value but never used.","'values' is assigned a value but never used.",["109"],["110"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.",["109"],["110"],"no-global-assign","no-unsafe-negation"]